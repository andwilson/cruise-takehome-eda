arrange(car_id)
car_id <- df_u$car_id
start_time <- df_u$start_time
end_time <- df_u$end_time
ride_mins <- df_u$ride_mins
num_riders <- as.integer(df_u$num_riders)
df_u <- df %>%
select(car_id, start_time, end_time, ride_mins, num_riders) %>%
arrange(car_id)
car_id <- df_u$car_id
start_time <- df_u$start_time
end_time <- df_u$end_time
ride_mins <- df_u$ride_mins
num_riders <- as.integer(df_u$num_riders)
df_u <- df %>%
select(car_id, start_time, end_time, ride_mins, num_riders) %>%
arrange(car_id)
car_id <- df_u$car_id
start_time <- df_u$start_time
end_time <- df_u$end_time
ride_mins <- df_u$ride_mins
num_riders <- as.integer(df_u$num_riders)
repl_python()
## clean workspace
rm(list=ls(all=TRUE))
## I/O libraries
library(readxl)
#library(readr)
library(knitr)
#library(officer)
library(lemon)
## clean workspace
rm(list=ls(all=TRUE))
## Visualization libraries
library(ggplot2)
library(ggthemes)
library(scales)
library(GGally)
library(RColorBrewer)
#library(kableExtra)
#library(gridExtra)
#library(r2d3)
## I/O libraries
library(readxl)
#library(readr)
library(knitr)
#library(officer)
library(lemon)
install.packages("ggplot2")
install.packages("ggplot2")
## clean workspace
rm(list=ls(all=TRUE))
## Visualization libraries
library(ggplot2)
library(ggthemes)
library(scales)
library(GGally)
library(RColorBrewer)
#library(kableExtra)
#library(gridExtra)
#library(r2d3)
## I/O libraries
library(readxl)
#library(readr)
library(knitr)
#library(officer)
library(lemon)
knit_print.data.frame <- lemon_print
## Python to R and vice-versa
library(reticulate)
use_python("/Users/andrewwilson/anaconda/bin/python", required=TRUE)
## Data manipulation libraries
library(dplyr)
library(tidyr)
library(stringr)
library(lubridate)
library(forcats)
library(scales)
#library(purrr)
#library(car)
library(magrittr) # always have piping available by loading last
# knitr setup
knitr::opts_chunk$set(
echo = TRUE, # set to output code or not in document
message = FALSE, # messages won't be displayed
warning = FALSE, # warnings won't be displayed
cache.comments = FALSE, # will not rerun code when comments are added
comment = "#>", # change default output prefix
collapse = FALSE) # keep output with code (or not if FALSE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80))
## set custom theme
custom_theme <- function(base_size = 14, base_family = "Helvetica", ...){
modifyList(theme_minimal(base_size = base_size, base_family = base_family),
list(
legend.background =  element_rect(color = "black")
)
)
}
theme_set(custom_theme())
## disable scientific notation
options(scipen=999)
## set cruise colors
cruise_colors <- c("#fc553c", "#553d65")
## set up data directories, files names, and paths
#root_dir <- "/Users/andrewwilson/Documents-backup/Projects/cruise-take-home/"
data_file_name <- "final_analytics_takehome.xlsx"
data_path <- str_c("data/", data_file_name)
## import data from Excel
df_raw <- read_excel(data_path)
## clean workspace
rm(list=ls(all=TRUE))
## Visualization libraries
library(ggplot2)
library(ggthemes)
library(scales)
library(GGally)
library(RColorBrewer)
#library(kableExtra)
#library(gridExtra)
#library(r2d3)
## I/O libraries
library(readxl)
#library(readr)
library(knitr)
#library(officer)
library(lemon)
knit_print.data.frame <- lemon_print
## Python to R and vice-versa
library(reticulate)
use_python("/Users/andrewwilson/anaconda/bin/python", required=TRUE)
## Data manipulation libraries
library(dplyr)
library(tidyr)
library(stringr)
library(lubridate)
library(forcats)
library(scales)
#library(purrr)
#library(car)
library(magrittr) # always have piping available by loading last
# knitr setup
knitr::opts_chunk$set(
echo = TRUE, # set to output code or not in document
message = FALSE, # messages won't be displayed
warning = FALSE, # warnings won't be displayed
cache.comments = FALSE, # will not rerun code when comments are added
comment = "#>", # change default output prefix
collapse = FALSE) # keep output with code (or not if FALSE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80))
## set custom theme
custom_theme <- function(base_size = 14, base_family = "Helvetica", ...){
modifyList(theme_minimal(base_size = base_size, base_family = base_family),
list(
legend.background =  element_rect(color = "black")
)
)
}
theme_set(custom_theme())
## disable scientific notation
options(scipen=999)
## set cruise colors
cruise_colors <- c("#fc553c", "#553d65")
## set up data directories, files names, and paths
#root_dir <- "/Users/andrewwilson/Documents-backup/Projects/cruise-take-home/"
data_file_name <- "final_analytics_takehome.xlsx"
data_path <- str_c("data/", data_file_name)
## import data from Excel
df_raw <- read_excel(data_path)
## initial data cleaning
df <- df_raw %>%
# change characters to factors
mutate_if(is.character, as.factor) %>%
mutate(user_id = as.factor(user_id)) %>%
mutate(num_riders = as.factor(num_riders)) %>%
#mutate(num_near_misses = as.factor(num_near_misses)) %>%
mutate(rating = as.factor(rating)) %>%
# calculate ride time in minutes
mutate(ride_mins = as.numeric(end_time - start_time)/60) %>%
# eliminate data points that have negative ride time
filter(ride_mins>0) %>%
# add categorical labels for long, short, cheap, and expensive rides
mutate(time_cat = ifelse(ride_mins < 45, "short", "long")) %>%
mutate(price_cat = ifelse(price < 4, "cheap", "expensive"))
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
insatll.packages("knitr")
install.packages("knitr")
install.packages("knitr")
## clean workspace
rm(list=ls(all=TRUE))
## Visualization libraries
library(ggplot2)
library(ggthemes)
library(scales)
library(GGally)
library(RColorBrewer)
#library(kableExtra)
#library(gridExtra)
#library(r2d3)
## I/O libraries
library(readxl)
#library(readr)
library(knitr)
#library(officer)
## Python to R and vice-versa
library(reticulate)
use_python("/Users/andrewwilson/anaconda/bin/python", required=TRUE)
## Data manipulation libraries
library(dplyr)
library(tidyr)
library(stringr)
library(lubridate)
library(forcats)
library(scales)
#library(purrr)
#library(car)
library(magrittr) # always have piping available by loading last
# knitr setup
knitr::opts_chunk$set(
echo = TRUE, # set to output code or not in document
message = FALSE, # messages won't be displayed
warning = FALSE, # warnings won't be displayed
cache.comments = FALSE, # will not rerun code when comments are added
comment = "#>", # change default output prefix
collapse = FALSE) # keep output with code (or not if FALSE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80))
## set custom theme
custom_theme <- function(base_size = 14, base_family = "Helvetica", ...){
modifyList(theme_minimal(base_size = base_size, base_family = base_family),
list(
legend.background =  element_rect(color = "black")
)
)
}
theme_set(custom_theme())
## disable scientific notation
options(scipen=999)
## set cruise colors
cruise_colors <- c("#fc553c", "#553d65")
## set up data directories, files names, and paths
#root_dir <- "/Users/andrewwilson/Documents-backup/Projects/cruise-take-home/"
data_file_name <- "final_analytics_takehome.xlsx"
data_path <- str_c("data/", data_file_name)
## import data from Excel
df_raw <- read_excel(data_path)
## initial data cleaning
df <- df_raw %>%
# change characters to factors
mutate_if(is.character, as.factor) %>%
mutate(user_id = as.factor(user_id)) %>%
mutate(num_riders = as.factor(num_riders)) %>%
#mutate(num_near_misses = as.factor(num_near_misses)) %>%
mutate(rating = as.factor(rating)) %>%
# calculate ride time in minutes
mutate(ride_mins = as.numeric(end_time - start_time)/60) %>%
# eliminate data points that have negative ride time
filter(ride_mins>0) %>%
# add categorical labels for long, short, cheap, and expensive rides
mutate(time_cat = ifelse(ride_mins < 45, "short", "long")) %>%
mutate(price_cat = ifelse(price < 4, "cheap", "expensive"))
install.packages("tidyverse")
## clean workspace
rm(list=ls(all=TRUE))
## Visualization libraries
library(ggplot2)
library(ggthemes)
library(scales)
library(GGally)
library(RColorBrewer)
#library(kableExtra)
#library(gridExtra)
#library(r2d3)
## I/O libraries
library(readxl)
#library(readr)
library(knitr)
#library(officer)
## Python to R and vice-versa
library(reticulate)
use_python("/Users/andrewwilson/anaconda/bin/python", required=TRUE)
## Data manipulation libraries
library(dplyr)
library(tidyr)
library(stringr)
library(lubridate)
library(forcats)
library(scales)
#library(purrr)
#library(car)
library(magrittr) # always have piping available by loading last
# knitr setup
knitr::opts_chunk$set(
echo = TRUE, # set to output code or not in document
message = FALSE, # messages won't be displayed
warning = FALSE, # warnings won't be displayed
cache.comments = FALSE, # will not rerun code when comments are added
comment = "#>", # change default output prefix
collapse = FALSE) # keep output with code (or not if FALSE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80))
## set custom theme
custom_theme <- function(base_size = 14, base_family = "Helvetica", ...){
modifyList(theme_minimal(base_size = base_size, base_family = base_family),
list(
legend.background =  element_rect(color = "black")
)
)
}
theme_set(custom_theme())
## disable scientific notation
options(scipen=999)
## set cruise colors
cruise_colors <- c("#fc553c", "#553d65")
## set up data directories, files names, and paths
#root_dir <- "/Users/andrewwilson/Documents-backup/Projects/cruise-take-home/"
data_file_name <- "final_analytics_takehome.xlsx"
data_path <- str_c("data/", data_file_name)
## import data from Excel
df_raw <- read_excel(data_path)
## initial data cleaning
df <- df_raw %>%
# change characters to factors
mutate_if(is.character, as.factor) %>%
mutate(user_id = as.factor(user_id)) %>%
mutate(num_riders = as.factor(num_riders)) %>%
#mutate(num_near_misses = as.factor(num_near_misses)) %>%
mutate(rating = as.factor(rating)) %>%
# calculate ride time in minutes
mutate(ride_mins = as.numeric(end_time - start_time)/60) %>%
# eliminate data points that have negative ride time
filter(ride_mins>0) %>%
# add categorical labels for long, short, cheap, and expensive rides
mutate(time_cat = ifelse(ride_mins < 45, "short", "long")) %>%
mutate(price_cat = ifelse(price < 4, "cheap", "expensive"))
?dplyr
update.packages(ask = FALSE)
R.Version()
## clean workspace
rm(list=ls(all=TRUE))
library(tidyverse)
library(scales)
library(GGally)
library(RColorBrewer)
library(readxl)
#library(knitr)
library(lubridate)
library(scales)
library(reticulate)
use_python("/Users/andrewwilson/anaconda/bin/python", required=TRUE)
#library(officer)
#library(magrittr) # always have piping available
## set custom theme
custom_theme <- function(base_size = 14, base_family = "Helvetica", ...){
modifyList(theme_minimal(base_size = base_size, base_family = base_family),
list(
legend.background =  element_rect(color = "black")
)
)
}
theme_set(custom_theme())
## disable scientific notation
options(scipen=999)
## set cruise colors
cruise_colors <- c("#fc553c", "#553d65")
## set up data directories, files names, and paths
#root_dir <- "/Users/andrewwilson/Documents-backup/Projects/cruise-take-home/"
data_file_name <- "final_analytics_takehome.xlsx"
data_path <- str_c("data/", data_file_name)
## import data from Excel
df_raw <- read_excel(data_path)
## initial data cleaning
df <- df_raw %>%
# change characters to factors
mutate_if(is.character, as.factor) %>%
mutate(user_id = as.factor(user_id)) %>%
mutate(num_riders = as.factor(num_riders)) %>%
#mutate(num_near_misses = as.factor(num_near_misses)) %>%
mutate(rating = as.factor(rating)) %>%
# calculate ride time in minutes
mutate(ride_mins = as.numeric(end_time - start_time)/60) %>%
# eliminate data points that have negative ride time
filter(ride_mins>0) %>%
# add categorical labels for long, short, cheap, and expensive rides
mutate(time_cat = ifelse(ride_mins < 45, "short", "long")) %>%
mutate(price_cat = ifelse(price < 4, "cheap", "expensive"))
# Check out cleansed data
glimpse(df)
# filter data frame to get only rides with near misses
df_misses <- df %>%
select(num_near_misses, ride_mins, region, rating, car_id) %>%
filter(num_near_misses > 0) %>%
arrange(desc(num_near_misses)) %>%
mutate(ride_mins = round(ride_mins))
kable(df_misses, booktabs = TRUE,
caption="Near misses are on long rides, in SF, and are rated at 1 or 2 stars")
## clean workspace
rm(list=ls(all=TRUE))
library(tidyverse)
library(scales)
library(GGally)
library(RColorBrewer)
library(readxl)
library(knitr)
library(lubridate)
library(scales)
library(reticulate)
use_python("/Users/andrewwilson/anaconda/bin/python", required=TRUE)
#library(officer)
#library(magrittr) # always have piping available
## set custom theme
custom_theme <- function(base_size = 14, base_family = "Helvetica", ...){
modifyList(theme_minimal(base_size = base_size, base_family = base_family),
list(
legend.background =  element_rect(color = "black")
)
)
}
theme_set(custom_theme())
## disable scientific notation
options(scipen=999)
## set cruise colors
cruise_colors <- c("#fc553c", "#553d65")
## set up data directories, files names, and paths
#root_dir <- "/Users/andrewwilson/Documents-backup/Projects/cruise-take-home/"
data_file_name <- "final_analytics_takehome.xlsx"
data_path <- str_c("data/", data_file_name)
## import data from Excel
df_raw <- read_excel(data_path)
## initial data cleaning
df <- df_raw %>%
# change characters to factors
mutate_if(is.character, as.factor) %>%
mutate(user_id = as.factor(user_id)) %>%
mutate(num_riders = as.factor(num_riders)) %>%
#mutate(num_near_misses = as.factor(num_near_misses)) %>%
mutate(rating = as.factor(rating)) %>%
# calculate ride time in minutes
mutate(ride_mins = as.numeric(end_time - start_time)/60) %>%
# eliminate data points that have negative ride time
filter(ride_mins>0) %>%
# add categorical labels for long, short, cheap, and expensive rides
mutate(time_cat = ifelse(ride_mins < 45, "short", "long")) %>%
mutate(price_cat = ifelse(price < 4, "cheap", "expensive"))
# Check out cleansed data
glimpse(df)
# filter data frame to get only rides with near misses
df_misses <- df %>%
select(num_near_misses, ride_mins, region, rating, car_id) %>%
filter(num_near_misses > 0) %>%
arrange(desc(num_near_misses)) %>%
mutate(ride_mins = round(ride_mins))
kable(df_misses, booktabs = TRUE,
caption="Near misses are on long rides, in SF, and are rated at 1 or 2 stars")
# count number of misses per car
df_misses_cars <- df_misses %>% group_by(car_id) %>%
summarize(total_near_misses = sum(num_near_misses),
percentage_near_misses = percent(total_near_misses/sum(df_misses$num_near_misses))) %>%
arrange(desc(total_near_misses))
kable(df_misses_cars, booktabs = TRUE,
caption="Superman has three quarters of the near misses")
df_u <- df %>%
select(car_id, start_time, end_time, ride_mins, num_riders) %>%
arrange(car_id)
car_id <- df_u$car_id
start_time <- period_to_seconds(seconds(df_u$start_time))
end_time <- period_to_seconds(seconds(df_u$end_time))
ride_mins <- df_u$ride_mins
num_riders <- as.integer(df_u$num_riders)
start_time_flattened_POSXct = as.POSIXct(py$start_time_flattened, tz="UTC", origin = "1970-01-01")
end_time_flattened_POSXct = as.POSIXct(py$end_time_flattened, tz="UTC", origin = "1970-01-01")
df_uf <- data.frame("car_id" = py$car_id_flattened, "start_time" = start_time_flattened_POSXct, "end_time" = end_time_flattened_POSXct, "num_riders" = py$num_riders_flattened) %>%
mutate(ride_mins = as.double(end_time - start_time)/60)
glimpse(df_uf)
overall_average_utilization <- df_uf %>%
summarize(((sum(num_riders * ride_mins)) / (sum(ride_mins)))/5) %>%
as.double()
# average utilization per car
df_uf_car <- df_uf %>%
group_by(car_id) %>%
summarize(avg_num_riders = (sum(num_riders * ride_mins)) / (sum(ride_mins)),
avg_utilization = avg_num_riders / 5,
percent_time_between_rides = sum(ride_mins[num_riders==0])/sum(ride_mins))
ggplot(df_uf_car, aes(fct_reorder(car_id, percent_time_between_rides), percent_time_between_rides, fill=car_id)) +
geom_bar(stat="identity") +
coord_flip() +
scale_fill_brewer(palette="Set1") +
labs(x="Total Gross Sales ($, log scale)",
y="Total Gross Margin",
color="Margin (%)",
title="Gross sales and margins aggregated by account")
# average utilization per hour per car (based on total # of seats available)
df_uf %>% mutate(hour = hour(start_time)) %>%
group_by(car_id, hour) %>%
summarize(avg_num_riders = (sum(num_riders * ride_mins)) / (sum(ride_mins)),
avg_utilization = avg_num_riders / 5) %>%
ungroup() %>%
ggplot(aes(hour, avg_utilization, color=car_id)) +
geom_step() +
facet_wrap(~car_id) +
scale_color_brewer(palette="Set1")
# average utilization per
ggplot(df_uf_car, aes(fct_reorder(car_id, avg_utilization), avg_utilization, fill=car_id)) +
geom_bar(stat="identity") +
coord_flip() +
scale_fill_brewer(palette="Set1")
